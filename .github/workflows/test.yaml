name: Terraform Workflow with OIDC, SNS Notification, and Logs Upload to S3

on:
  push: 
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 3: Configure AWS Credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Initialize Terraform (INFO logging)
      - name: Terraform Init
        env:
          TF_LOG: INFO
        run: terraform init

      # Step 5: Terraform Validate (DEBUG logging)
      - name: Terraform Validate
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform_validate.log
        run: |
          terraform validate || echo "FAILURE_FLAG=true" >> $GITHUB_ENV
          true

      # Step 6: Terraform Plan (INFO logging)
      - name: Terraform Plan
        env:
          TF_LOG: INFO
          TF_LOG_PATH: terraform_plan.log
        run: |
          terraform plan -out=tfplan || echo "FAILURE_FLAG=true" >> $GITHUB_ENV
          true

      # Step 7: Terraform Apply (TRACE logging)
      - name: Terraform Apply
        env:
          TF_LOG: TRACE
          TF_LOG_PATH: terraform_apply.log
        run: |
          terraform apply -auto-approve tfplan || echo "FAILURE_FLAG=true" >> $GITHUB_ENV
          true

      # Step 8: Retrieve S3 Bucket Name
      - name: Retrieve S3 Bucket Name
        id: output
        run: |
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          echo "S3_BUCKET_NAME=${S3_BUCKET_NAME}" >> $GITHUB_ENV

      # Step 9: Ensure Logs Directory Exists (DEBUG logging)
      - name: Ensure Logs Directory Exists
        env:
          TF_LOG: DEBUG
        run: mkdir -p $GITHUB_WORKSPACE/logs

      # Step 10: Copy Logs to Logs Directory (WARN logging)
      - name: Copy Logs to Logs Directory
        env:
          TF_LOG: WARN
        run: |
          cp terraform_validate.log $GITHUB_WORKSPACE/logs/ || true
          cp terraform_plan.log $GITHUB_WORKSPACE/logs/ || true
          cp terraform_apply.log $GITHUB_WORKSPACE/logs/ || true
          echo "Files in logs directory:"
          ls -alh $GITHUB_WORKSPACE/logs/

      # Step 11: Print Logs on Failure (ERROR logging)
      - name: Print Logs on Failure
        if: failure()
        env:
          TF_LOG: ERROR
        run: |
          echo "Terraform failed. Logs are as follows:"
          cat $GITHUB_WORKSPACE/logs/terraform_validate.log || true
          cat $GITHUB_WORKSPACE/logs/terraform_plan.log || true
          cat $GITHUB_WORKSPACE/logs/terraform_apply.log || true

      # Step 12: Upload Terraform Logs as Artifacts (Always, even on failure)
      - name: Upload Terraform Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-logs
          path: logs/

      # Step 13: Upload Logs to S3 (Both Success and Failure)
      - name: Upload Logs to S3
        if: always()
        run: |
          aws s3 cp $GITHUB_WORKSPACE/logs/ s3://${{ secrets.S3_BUCKET_NAME }}/logs/ --recursive
      
      # Step 14: Verify S3 Bucket Content (Deployment Verification)
      - name: Verify S3 Bucket Content
        run: |
          echo "Verifying deployment in S3..."
          aws s3 ls s3://${{ env.S3_BUCKET_NAME }}/ --recursive
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Step 14: Generate Workflow Run Link
      - name: Generate workflow run link
        id: generate_link
        run: echo "run_url=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV

      # Step 15: Send SNS Notification (Success or Failure)
      - name: Send SNS Notification
        if: always()
        run: |
          if [[ "${{ env.FAILURE_FLAG }}" == "true" ]]; then
            SUBJECT="Terraform Workflow Status - failure"
            BODY="The Terraform workflow has failed. Please check the logs for details. View the workflow run here: ${{ env.run_url }}"
          else
            SUBJECT="Terraform Workflow Status - success"
            BODY="The Terraform workflow has completed successfully. Please check the logs for details. View the workflow run here: ${{ env.run_url }}"
          fi

          aws sns publish \
            --topic-arn arn:aws:sns:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:${{ secrets.SNS_TOPIC_NAME }} \
            --message "$BODY" \
            --subject "$SUBJECT"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Step 16: Force Workflow Failure if Any Step Failed
      - name: Fail Workflow if Any Step Failed
        if: ${{ env.FAILURE_FLAG == 'true' }}
        run: |
          echo "One or more Terraform steps failed. Marking workflow as failed."
          exit 1
