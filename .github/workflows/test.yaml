To handle the state lock error in your GitHub Actions workflow, you can add a step to force unlock the state before running the Terraform commands. Here's how you can integrate this into your existing workflow:

### Updated GitHub Actions Workflow

```yaml
name: Terraform Workflow with OIDC, SNS Notification, and Logs Upload to S3

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for OIDC
      contents: read   # Required to access repository contents

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 4: Run Tests
      - name: Run Tests
        run: npm test

      # Step 5: Build React App
      - name: Build React App
        run: npm run build

      # Step 6: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 7: Configure AWS Credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 8: Force Unlock Terraform State
      - name: Force Unlock Terraform State
        run: terraform force-unlock <LOCK_ID> || true  # Replace <LOCK_ID> with the actual lock ID

      # Step 9: Initialize Terraform (INFO logging)
      - name: Terraform Init
        env:
          TF_LOG: INFO  # Set Terraform logging to INFO for general info messages
        run: terraform init

      # Step 10: Terraform Validate (DEBUG logging)
      - name: Terraform Validate
        env:
          TF_LOG: DEBUG  # Set Terraform logging to DEBUG for detailed logs
          TF_LOG_PATH: terraform_validate.log
        run: |
          terraform validate || echo "FAILURE_FLAG=true" >> $GITHUB_ENV
          true  # Always continue execution

      # Step 11: Terraform Plan (INFO logging)
      - name: Terraform Plan
        env:
          TF_LOG: INFO  # Set Terraform logging to INFO for plan-related logs
          TF_LOG_PATH: terraform_plan.log
        run: |
          terraform plan -out=tfplan || echo "FAILURE_FLAG=true" >> $GITHUB_ENV
          true  # Always continue execution

      # Step 12: Terraform Apply (TRACE logging)
      - name: Terraform Apply
        env:
          TF_LOG: TRACE  # Set Terraform logging to TRACE for detailed logs
          TF_LOG_PATH: terraform_apply.log
        run: |
          terraform apply -auto-approve tfplan || echo "FAILURE_FLAG=true" >> $GITHUB_ENV
          true  # Always continue execution

      # Step 13: Ensure Logs Directory Exists (DEBUG logging)
      - name: Ensure Logs Directory Exists
        env:
          TF_LOG: DEBUG  # Set Terraform logging to DEBUG for detailed process steps
        run: mkdir -p $GITHUB_WORKSPACE/logs

      # Step 14: Copy Logs to Logs Directory (WARN logging)
      - name: Copy Logs to Logs Directory
        env:
          TF_LOG: WARN  # Set Terraform logging to WARN to capture potential issues
        run: |
          cp terraform_validate.log $GITHUB_WORKSPACE/logs/ || true
          cp terraform_plan.log $GITHUB_WORKSPACE/logs/ || true
          cp terraform_apply.log $GITHUB_WORKSPACE/logs/ || true
          echo "Files in logs directory:"
          ls -alh $GITHUB_WORKSPACE/logs/

      # Step 15: Print Logs on Failure (ERROR logging)
      - name: Print Logs on Failure
        if: failure()  # Only print logs if failure occurs
        env:
          TF_LOG: ERROR  # Set Terraform logging to ERROR to capture critical failure messages
        run: |
          echo "Terraform failed. Logs are as follows:"
          cat $GITHUB_WORKSPACE/logs/terraform_validate.log || true
          cat $GITHUB_WORKSPACE/logs/terraform_plan.log || true
          cat $GITHUB_WORKSPACE/logs/terraform_apply.log || true

      # Step 16: Upload Terraform Logs as Artifacts (Always, even on failure)
      - name: Upload Terraform Logs as Artifacts
        if: always()  # Ensure this runs even if the workflow fails
        uses: actions/upload-artifact@v3
        with:
          name: terraform-logs
          path: logs/
      
      # Step 17: Upload Logs to S3 (Both Success and Failure)
      - name: Upload Logs to S3
        if: always()  # Ensure this runs even if the workflow fails
        run: |
          aws s3 cp $GITHUB_WORKSPACE/logs/ s3://${{ secrets.S3_BUCKET_NAME }}/logs/ --recursive

      # Step 18: Generate Workflow Run Link
      - name: Generate workflow run link
        id: generate_link
        run: echo "run_url=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV

      # Step 19: Send SNS Notification (Success or Failure)
      - name: Send SNS Notification
        if: always()  # Ensure this runs even if the workflow fails or succeeds
        run: |
          # Check the FAILURE_FLAG to determine whether the workflow failed
          if [[ "${{ env.FAILURE_FLAG }}" == "true" ]]; then
            SUBJECT="Terraform Workflow Status - failure"
            BODY="The Terraform workflow has failed. Please check the logs for details. View the workflow run here: ${{ env.run_url }}"
          else
            SUBJECT="Terraform Workflow Status - success"
            BODY="The Terraform workflow has completed successfully. Please check the logs for details. View the workflow run here: ${{ env.run_url }}"
          fi

          # Publish the SNS message with the status and the workflow URL
          aws sns publish \
            --topic-arn arn:aws:sns:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:${{ secrets.SNS_TOPIC_NAME }} \
            --message "$BODY" \
            --subject "$SUBJECT"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Step 20: Fail Workflow if Any Step Failed
      - name: Fail Workflow if Any Step Failed
        if: ${{ env.FAILURE_FLAG == 'true' }}
        run: |
          echo "One or more Terraform steps failed. Marking workflow as failed."
          exit 1  # Exit with failure status

      # Step 21: Deploy React App to S3
      - name: Deploy React App to S3
        run: |
          aws s3 sync build/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
```

### Explanation

- **Force Unlock Terraform State**: This step attempts to force unlock the Terraform state before running any Terraform commands. Replace `<LOCK_ID>` with the actual lock ID from the error message.

This should help resolve the state lock issue and ensure your workflow runs smoothly. Let me know if you need any further assistance!
