name: Terraform Infrastructure and React App Deployment with Logs 

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC
      contents: read   # Required to access repository contents

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Setup AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Initialize Terraform (INFO logging)
      - name: Terraform Init
        run: terraform init

      # Terraform Validate (DEBUG logging)
      - name: Terraform Validate
        run: terraform validate

      # Terraform Plan (INFO logging)
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Terraform Apply (TRACE logging)
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      # Copy Logs to S3
      - name: Upload Terraform Logs to S3
        if: always()
        run: |
          echo "Uploading Terraform logs to S3..."
          aws s3 cp $GITHUB_WORKSPACE/logs/ s3://${{ secrets.S3_BUCKET_NAME }}/logs/ --recursive

  deploy:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      # Checkout the code again for deployment
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js and install dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      # Build the React App
      - name: Build React App
        run: npm run build

      # Deploy the app to the AWS S3 bucket created by Terraform
      - name: Deploy React App to S3
        run: |
          aws s3 cp dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --recursive

      # Invalidate CloudFront Cache
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} --paths "/*"

      # Upload Deployment Logs to S3
      - name: Upload Deployment Logs to S3
        if: always()
        run: |
          echo "Uploading deployment logs to S3..."
          aws s3 cp $GITHUB_WORKSPACE/logs/ s3://${{ secrets.S3_BUCKET_NAME }}/logs/ --recursive
